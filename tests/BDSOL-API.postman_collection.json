{
	"info": {
		"_postman_id": "ce797056-d03e-4791-900a-359bc603fdb3",
		"name": "BDSOL-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20488053"
	},
	"item": [
		{
			"name": "Organisation",
			"item": [
				{
					"name": "1-Create-all-org",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
									"console.log(pm.iterationData.toObject());\r",
									"\r",
									"if (pm.iterationData.has(\"infoTest\"))\r",
									"{\r",
									"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
									"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
									"    pm.iterationData.unset(\"infoTest\");\r",
									"\r",
									"    v_data = pm.iterationData.toObject();\r",
									"\r",
									"}\r",
									"else{\r",
									"    v_data.nom = \"Librairie Pommerleau\";\r",
									"    v_data.description = \"Librairie de petit marchandeur\";\r",
									"    v_data.url = \"https://lalibrairiepommerleau.meilleur\";\r",
									"    v_data.contactPoint = \"info@meilleurelibrairie.meilleurfois2\"\r",
									"\r",
									"}\r",
									"\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"array\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"_id\": { \"type\": \"string\" },\r",
									"                        \"nom\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" },\r",
									"                        \"url\": { \"type\": \"string\" },\r",
									"                        \"contactPoint\": { \"type\": \"string\" },\r",
									"                        \"createdAt\": { \"type\": \"string\" },\r",
									"                        \"updatedAt\": { \"type\": \"string\" }\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"const infoTest = pm.environment.get(\"infoTest\");\r",
									"pm.iterationData.unset(\"infoTest\");\r",
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"\r",
									"pm.test('Status/code check', function(){\r",
									"    pm.response.to.have.status(infoTest.status);\r",
									"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
									"});\r",
									"\r",
									"pm.test('Error check', function(){\r",
									"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"if (jsonResponse.error == false)\r",
									"{\r",
									"    pm.environment.set(\"org\"+Number(pm.info.iteration+1), jsonData);\r",
									"\r",
									"    pm.test('Data check', function(){\r",
									"        pm.expect(jsonData).to.be.an(\"object\").that.includes(pm.iterationData.toObject());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{orgPATH}}/create",
							"host": [
								"{{baseURL}}{{orgPATH}}"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "2-Update-all-org",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
									"console.log(pm.iterationData.toObject());\r",
									"\r",
									"if (pm.iterationData.has(\"infoTest\"))\r",
									"{\r",
									"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
									"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
									"    pm.iterationData.unset(\"infoTest\");\r",
									"\r",
									"    v_data = pm.iterationData.toObject();\r",
									"\r",
									"    if(v_data.id === undefined)\r",
									"        v_data.id = pm.environment.get(\"org1\")._id;\r",
									"}\r",
									"else{\r",
									"    v_data.id = \"bidon\"\r",
									"}\r",
									"\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"array\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"acknowledged\": { \"type\": \"boolean\" },\r",
									"                        \"modifiedCount\": { \"type\": \"number\" },\r",
									"                        \"upsertedId\": { \"type\": \"null\" },\r",
									"                        \"upsertedCount\": { \"type\": \"number\" },\r",
									"                        \"matchedCount\": { \"type\": \"number\" },\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"const infoTest = pm.environment.get(\"infoTest\");\r",
									"pm.iterationData.unset(\"infoTest\");\r",
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"pm.test('Status/code check', function(){\r",
									"    pm.response.to.have.status(infoTest.status);\r",
									"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
									"});\r",
									"\r",
									"pm.test('Error check', function(){\r",
									"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{orgPATH}}/update",
							"host": [
								"{{baseURL}}{{orgPATH}}"
							],
							"path": [
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "3-Search-all-org",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
									"console.log(pm.iterationData.toObject());\r",
									"\r",
									"if (pm.iterationData.has(\"infoTest\"))\r",
									"{\r",
									"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
									"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
									"    pm.iterationData.unset(\"infoTest\");\r",
									"\r",
									"    v_data = pm.iterationData.toObject();\r",
									"\r",
									"    if(pm.environment.get(\"infoTest\").setId == true)\r",
									"        v_data.id = pm.environment.get(\"org1\")._id;\r",
									"}\r",
									"\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"array\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"_id\": { \"type\": \"string\" },\r",
									"                        \"nom\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" },\r",
									"                        \"url\": { \"type\": \"string\" },\r",
									"                        \"contactPoint\": { \"type\": \"string\" },\r",
									"                        \"createdAt\": { \"type\": \"string\" },\r",
									"                        \"updatedAt\": { \"type\": \"string\" }\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"\r",
									"const infoTest = pm.environment.get(\"infoTest\");\r",
									"pm.iterationData.unset(\"infoTest\");\r",
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"pm.test('Status/code check', function(){\r",
									"    pm.response.to.have.status(infoTest.status);\r",
									"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
									"});\r",
									"\r",
									"pm.test('Error check', function(){\r",
									"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test('Search found or not item correctly', function(){\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{orgPATH}}/search",
							"host": [
								"{{baseURL}}{{orgPATH}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "4-List-all-org",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
									"console.log(pm.iterationData.toObject());\r",
									"\r",
									"if (pm.iterationData.has(\"infoTest\"))\r",
									"{\r",
									"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
									"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
									"    pm.iterationData.unset(\"infoTest\");\r",
									"\r",
									"    v_data = pm.iterationData.toObject();\r",
									"\r",
									"    if(pm.environment.get(\"infoTest\").setId == true)\r",
									"        v_data.id = pm.environment.get(\"org1\")._id;\r",
									"}\r",
									"\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"array\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"properties\": {\r",
									"                        \"_id\": { \"type\": \"string\" },\r",
									"                        \"nom\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" },\r",
									"                        \"url\": { \"type\": \"string\" },\r",
									"                        \"contactPoint\": { \"type\": \"string\" },\r",
									"                        \"createdAt\": { \"type\": \"string\" },\r",
									"                        \"updatedAt\": { \"type\": \"string\" }\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"\r",
									"const infoTest = pm.environment.get(\"infoTest\");\r",
									"pm.iterationData.unset(\"infoTest\");\r",
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"pm.test('Status/code check', function(){\r",
									"    pm.response.to.have.status(infoTest.status);\r",
									"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
									"});\r",
									"\r",
									"pm.test('Error check', function(){\r",
									"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test('List found or not item correctly', function(){\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{orgPATH}}/list",
							"host": [
								"{{baseURL}}{{orgPATH}}"
							],
							"path": [
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "5-Delete-all-org",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"let toDel;\r",
									"let vars;\r",
									"let varsKeys;\r",
									"while(pm.environment.toObject())\r",
									"{\r",
									"    vars = pm.environment.toObject();\r",
									"    varsKeys = Object.keys(vars);\r",
									"\r",
									"    toDel = varsKeys.pop();\r",
									"    if(toDel === undefined)\r",
									"    break;\r",
									"\r",
									"    if (toDel.includes(\"org\")){\r",
									"        break;\r",
									"    }\r",
									"    pm.environment.unset(toDel);\r",
									"\r",
									"}\r",
									"if(toDel !== undefined)\r",
									"{\r",
									"    v_data.id = vars[toDel]._id\r",
									"    pm.environment.unset(toDel);\r",
									"}\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"if(Object.keys(pm.environment.toObject()) != 0)\r",
									"{\r",
									"    pm.test('Status OK', function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test('Delete successful', function(){\r",
									"        pm.expect(jsonResponse.error).to.be.false;\r",
									"        pm.expect(jsonResponse.errors).to.be.empty;\r",
									"    });\r",
									"\r",
									"    postman.setNextRequest(\"5-Delete-all-org\");\r",
									"}\r",
									"else\r",
									"{\r",
									"    pm.environment.clear();\r",
									"    postman.setNextRequest(null);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{orgPATH}}/delete",
							"host": [
								"{{baseURL}}{{orgPATH}}"
							],
							"path": [
								"delete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Personnes",
			"item": [
				{
					"name": "1-Create-all-pers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"array\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"_id\": { \"type\": \"string\" },\r",
									"                        \"nom\": { \"type\": \"string\" },\r",
									"                        \"prenom\": { \"type\": \"string\" },\r",
									"                        \"surnom\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" },\r",
									"                        \"createdAt\": { \"type\": \"string\" },\r",
									"                        \"updatedAt\": { \"type\": \"string\" }\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"const infoTest = pm.environment.get(\"infoTest\");\r",
									"pm.iterationData.unset(\"infoTest\");\r",
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"\r",
									"pm.test('Status/code check', function(){\r",
									"    pm.response.to.have.status(infoTest.status);\r",
									"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
									"});\r",
									"\r",
									"pm.test('Error check', function(){\r",
									"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"if (jsonResponse.error == false)\r",
									"{\r",
									"    pm.environment.set(\"pers\"+Number(pm.info.iteration+1), jsonData);\r",
									"\r",
									"    pm.test('Data check', function(){\r",
									"        pm.expect(jsonData).to.be.an(\"object\").that.includes(pm.iterationData.toObject());\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
									"console.log(pm.iterationData.toObject());\r",
									"\r",
									"if (pm.iterationData.has(\"infoTest\"))\r",
									"{\r",
									"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
									"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
									"    pm.iterationData.unset(\"infoTest\");\r",
									"\r",
									"    v_data = pm.iterationData.toObject();\r",
									"\r",
									"}\r",
									"else{\r",
									"    v_data.nom = \"Parent\";\r",
									"    v_data.prenom = \"Jean-marc\";\r",
									"    v_data.surnom = \"Mickette\";\r",
									"    v_data.description = \"Humour\"\r",
									"\r",
									"}\r",
									"\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{persPATH}}/create",
							"host": [
								"{{baseURL}}{{persPATH}}"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "2-Update-all-pers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
									"console.log(pm.iterationData.toObject());\r",
									"\r",
									"if (pm.iterationData.has(\"infoTest\"))\r",
									"{\r",
									"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
									"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
									"    pm.iterationData.unset(\"infoTest\");\r",
									"\r",
									"    v_data = pm.iterationData.toObject();\r",
									"\r",
									"    if(v_data.id === undefined)\r",
									"        v_data.id = pm.environment.get(\"pers1\")._id;\r",
									"}\r",
									"else{\r",
									"    v_data.id = \"bidon\"\r",
									"}\r",
									"\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"object\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"acknowledged\": { \"type\": \"boolean\" },\r",
									"                        \"modifiedCount\": { \"type\": \"number\" },\r",
									"                        \"upsertedId\": { \"type\": \"null\" },\r",
									"                        \"upsertedCount\": { \"type\": \"number\" },\r",
									"                        \"matchedCount\": { \"type\": \"number\" },\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"\r",
									"const infoTest = pm.environment.get(\"infoTest\");\r",
									"pm.iterationData.unset(\"infoTest\");\r",
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"pm.test('Status/code check', function(){\r",
									"    pm.response.to.have.status(infoTest.status);\r",
									"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
									"});\r",
									"\r",
									"pm.test('Error check', function(){\r",
									"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{persPATH}}/update",
							"host": [
								"{{baseURL}}{{persPATH}}"
							],
							"path": [
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "3-Search-all-pers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
									"console.log(pm.iterationData.toObject());\r",
									"\r",
									"if (pm.iterationData.has(\"infoTest\"))\r",
									"{\r",
									"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
									"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
									"    pm.iterationData.unset(\"infoTest\");\r",
									"\r",
									"    v_data = pm.iterationData.toObject();\r",
									"\r",
									"    if(pm.environment.get(\"infoTest\").setId == true)\r",
									"        v_data.id = pm.environment.get(\"pers1\")._id;\r",
									"}\r",
									"\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"array\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"_id\": { \"type\": \"string\" },\r",
									"                        \"nom\": { \"type\": \"string\" },\r",
									"                        \"prenom\": { \"type\": \"string\" },\r",
									"                        \"surnom\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" },\r",
									"                        \"createdAt\": { \"type\": \"string\" },\r",
									"                        \"updatedAt\": { \"type\": \"string\" }\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"\r",
									"const infoTest = pm.environment.get(\"infoTest\");\r",
									"pm.iterationData.unset(\"infoTest\");\r",
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"pm.test('Status/code check', function(){\r",
									"    pm.response.to.have.status(infoTest.status);\r",
									"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
									"});\r",
									"\r",
									"pm.test('Error check', function(){\r",
									"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test('Search found or not item correctly', function(){\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{persPATH}}/search",
							"host": [
								"{{baseURL}}{{persPATH}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "4-List-all-pers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
									"console.log(pm.iterationData.toObject());\r",
									"\r",
									"if (pm.iterationData.has(\"infoTest\"))\r",
									"{\r",
									"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
									"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
									"    pm.iterationData.unset(\"infoTest\");\r",
									"\r",
									"    v_data = pm.iterationData.toObject();\r",
									"\r",
									"    if(pm.environment.get(\"infoTest\").setId == true)\r",
									"        v_data.id = pm.environment.get(\"pers1\")._id;\r",
									"}\r",
									"\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"array\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"properties\": {\r",
									"                        \"_id\": { \"type\": \"string\" },\r",
									"                        \"nom\": { \"type\": \"string\" },\r",
									"                        \"prenom\": { \"type\": \"string\" },\r",
									"                        \"surnom\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" },\r",
									"                        \"createdAt\": { \"type\": \"string\" },\r",
									"                        \"updatedAt\": { \"type\": \"string\" }\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"\r",
									"const infoTest = pm.environment.get(\"infoTest\");\r",
									"pm.iterationData.unset(\"infoTest\");\r",
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"pm.test('Status/code check', function(){\r",
									"    pm.response.to.have.status(infoTest.status);\r",
									"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
									"});\r",
									"\r",
									"pm.test('Error check', function(){\r",
									"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test('List found or not item correctly', function(){\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{persPATH}}/list",
							"host": [
								"{{baseURL}}{{persPATH}}"
							],
							"path": [
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "5-Delete-all-pers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"let toDel;\r",
									"let vars;\r",
									"let varsKeys;\r",
									"while(pm.environment.toObject())\r",
									"{\r",
									"    vars = pm.environment.toObject();\r",
									"    varsKeys = Object.keys(vars);\r",
									"\r",
									"    toDel = varsKeys.pop();\r",
									"    if(toDel === undefined)\r",
									"    break;\r",
									"\r",
									"    if (toDel.includes(\"pers\")){\r",
									"        break;\r",
									"    }\r",
									"    pm.environment.unset(toDel);\r",
									"\r",
									"}\r",
									"if(toDel !== undefined)\r",
									"{\r",
									"    v_data.id = vars[toDel]._id\r",
									"    pm.environment.unset(toDel);\r",
									"}\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"if(Object.keys(pm.environment.toObject()) != 0)\r",
									"{\r",
									"    pm.test('Status OK', function(){\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test('Delete successful', function(){\r",
									"        pm.expect(jsonResponse.error).to.be.false;\r",
									"        pm.expect(jsonResponse.errors).to.be.empty;\r",
									"    });\r",
									"\r",
									"    postman.setNextRequest(\"5-Delete-all-pers\");\r",
									"}\r",
									"else\r",
									"{\r",
									"    pm.environment.clear();\r",
									"    postman.setNextRequest(null);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{persPATH}}/delete",
							"host": [
								"{{baseURL}}{{persPATH}}"
							],
							"path": [
								"delete"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "1-Create-all-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"object\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"username\": { \"type\": \"string\" },\r",
									"                        \"email\": { \"type\": \"string\" },\r",
									"                        \"password\": { \"type\": \"string\" },\r",
									"                        \"avatar\": { \"type\": \"string\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"role\": { \"type\": \"string\" },\r",
									"                        \"createdAt\": { \"type\": \"string\" },\r",
									"                        \"updatedAt\": { \"type\": \"string\" }\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"const infoTest = pm.environment.get(\"infoTest\");\r",
									"pm.iterationData.unset(\"infoTest\");\r",
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"pm.test('Status/code check', function(){\r",
									"    pm.response.to.have.status(infoTest.status);\r",
									"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
									"});\r",
									"\r",
									"pm.test('Error check', function(){\r",
									"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"if (jsonResponse.error == false)\r",
									"{\r",
									"    pm.environment.set(\"user\"+Number(pm.info.iteration+1), jsonData._id);\r",
									"\r",
									"    pm.test('Data check', function(){\r",
									"        pm.expect(jsonData).to.be.an(\"object\").that.includes(pm.iterationData.toObject());\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"let v_data = {};\r",
									"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
									"console.log(pm.iterationData.toObject());\r",
									"\r",
									"if (pm.iterationData.has(\"infoTest\"))\r",
									"{\r",
									"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
									"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
									"    pm.iterationData.unset(\"infoTest\");\r",
									"\r",
									"    v_data = pm.iterationData.toObject();\r",
									"    /*if (pm.iterationData.has(\"username\"))\r",
									"        v_data.username = pm.iterationData.get(\"username\");\r",
									"    if (pm.iterationData.has(\"email\"))\r",
									"        v_data.email = pm.iterationData.get(\"email\");\r",
									"    if (pm.iterationData.has(\"password\"))\r",
									"        v_data.password = pm.iterationData.get(\"password\");\r",
									"    if (pm.iterationData.has(\"avatar\"))\r",
									"        v_data.avatar = pm.iterationData.get(\"avatar\");\r",
									"    if (pm.iterationData.has(\"name\"))\r",
									"        v_data.name = pm.iterationData.get(\"name\");\r",
									"    if (pm.iterationData.has(\"role\"))\r",
									"        v_data.role = pm.iterationData.get(\"role\");*/\r",
									"}\r",
									"else{\r",
									"    v_data.username = \"Marienero\";\r",
									"    v_data.email = \"mauveTercelle@jira.atlassian.cash\";\r",
									"    v_data.password = \"jironde42\";\r",
									"    v_data.avatar = \"La Marie dans la bible lah..\"\r",
									"    v_data.name = \"Marie Neron\";\r",
									"    v_data.role = \"Caliméro\";\r",
									"}\r",
									"\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\" : {{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{usersPATH}}/create",
							"host": [
								"{{baseURL}}{{usersPATH}}"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "2-Update-all-user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
									"console.log(pm.iterationData.toObject());\r",
									"\r",
									"if (pm.iterationData.has(\"infoTest\"))\r",
									"{\r",
									"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
									"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
									"    pm.iterationData.unset(\"infoTest\");\r",
									"\r",
									"    v_data = pm.iterationData.toObject();\r",
									"\r",
									"    if(v_data.id === undefined)\r",
									"        v_data.id = pm.environment.get(\"user1\");\r",
									"}\r",
									"else{\r",
									"    v_data.id = \"bidon\"\r",
									"}\r",
									"\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"object\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"acknowledged\": { \"type\": \"boolean\" },\r",
									"                        \"modifiedCount\": { \"type\": \"number\" },\r",
									"                        \"upsertedId\": { \"type\": \"null\" },\r",
									"                        \"upsertedCount\": { \"type\": \"number\" },\r",
									"                        \"matchedCount\": { \"type\": \"number\" },\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"const infoTest = pm.environment.get(\"infoTest\");\r",
									"pm.iterationData.unset(\"infoTest\");\r",
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"pm.test('Status/code check', function(){\r",
									"    pm.response.to.have.status(infoTest.status);\r",
									"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
									"});\r",
									"\r",
									"pm.test('Error check', function(){\r",
									"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{usersPATH}}/update",
							"host": [
								"{{baseURL}}{{usersPATH}}"
							],
							"path": [
								"update"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentification",
			"item": [
				{
					"name": "Dev",
					"item": [
						{
							"name": "Dev Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();\r",
											"\r",
											"pm.globals.set(\"DevToken\", jsonResponse.token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8000/generate-token",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"generate-token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "1-Login utilisateur qui n'existe pas",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"username\",\r\n    \"password\": \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/login",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "1-Login utilisateur qui existe",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"datageek\",\r\n    \"password\": \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/login",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Générique",
			"item": [
				{
					"name": "404",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/asdfasdfasdfasdf",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"asdfasdfasdfasdf"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{DevToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}