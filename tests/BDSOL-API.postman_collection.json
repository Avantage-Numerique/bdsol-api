{
	"info": {
		"_postman_id": "ce797056-d03e-4791-900a-359bc603fdb3",
		"name": "BDSOL-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20488053"
	},
	"item": [
		{
			"name": "CreateVariable",
			"item": [
				{
					"name": "CreateEnvVariable-org",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const create_schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"object\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"_id\": { \"type\": \"string\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"slug\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" },\r",
									"                        \"url\": { \"type\": \"string\" },\r",
									"                        \"contactPoint\": { \"type\": \"string\" },\r",
									"                        \"fondationDate\": {\"type\": [\"null\", \"string\"]},\r",
									"                        \"offer\": { \"type\": \"array\" },\r",
									"                        \"createdAt\": { \"type\": \"string\" },\r",
									"                        \"updatedAt\": { \"type\": \"string\" }\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"const update_schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"object\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"_id\": { \"type\": \"string\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"slug\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" },\r",
									"                        \"url\": { \"type\": \"string\" },\r",
									"                        \"contactPoint\": { \"type\": \"string\" },\r",
									"                        \"fondationDate\": {\"type\": [\"null\", \"string\"]},\r",
									"                        \"offer\": { \"type\": \"array\" },\r",
									"                        \"createdAt\": { \"type\": \"string\" },\r",
									"                        \"updatedAt\": { \"type\": \"string\" }\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"const entity_path = \"/organisations\";\r",
									"\r",
									"const e_data = {\r",
									"    \"name\" : \"Librairie Pommerleau\",\r",
									"    \"description\" : \"Librairie de petits marchandeurs\",\r",
									"    \"url\" : \"https://lalibrairiepommerleau.meilleur\",\r",
									"    \"contactPoint\" : \"info@meilleurelibrairie.meilleurfois2\",\r",
									"    \"dateDeFondation\" : \"2022-09-10\"\r",
									"};\r",
									"pm.environment.clear();\r",
									"pm.environment.set(\"create_schema\", create_schema);\r",
									"pm.environment.set(\"update_schema\", update_schema);\r",
									"pm.environment.set(\"entityPATH\", entity_path);\r",
									"pm.environment.set(\"e_data\", e_data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ping",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateEnvVariable-pers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const create_schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"object\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"_id\": { \"type\": \"string\" },\r",
									"                        \"lastName\": { \"type\": \"string\" },\r",
									"                        \"firstName\": { \"type\": \"string\" },\r",
									"                        \"slug\": { \"type\": \"string\" },\r",
									"                        \"nickname\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" },\r",
									"                        \"occupation\": { \"type\": \"array\" },\r",
									"                        \"createdAt\": { \"type\": \"string\" },\r",
									"                        \"updatedAt\": { \"type\": \"string\" }\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"const update_schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"object\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"_id\": { \"type\": \"string\" },\r",
									"                        \"lastName\": { \"type\": \"string\" },\r",
									"                        \"firstName\": { \"type\": \"string\" },\r",
									"                        \"slug\": { \"type\": \"string\" },\r",
									"                        \"nickname\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" },\r",
									"                        \"occupation\": { \"type\": \"array\" },\r",
									"                        \"createdAt\": { \"type\": \"string\" },\r",
									"                        \"updatedAt\": { \"type\": \"string\" }\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"const entity_path = \"/persons\";\r",
									"\r",
									"const e_data = {\r",
									"    \"lastName\" : \"Parent\",\r",
									"    \"firstName\" : \"Jean-Marc\",\r",
									"    \"nickname\" : \"Mickette\",\r",
									"    \"description\" : \"Humour\"\r",
									"};\r",
									"pm.environment.clear();\r",
									"pm.environment.set(\"create_schema\", create_schema);\r",
									"pm.environment.set(\"update_schema\", update_schema);\r",
									"pm.environment.set(\"entityPATH\", entity_path);\r",
									"pm.environment.set(\"e_data\", e_data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ping",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateEnvVariable-usr",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const create_schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"object\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"_id\": { \"type\": \"string\" },\r",
									"                        \"username\": { \"type\": \"string\" },\r",
									"                        \"email\": { \"type\": \"string\" },\r",
									"                        \"password\": { \"type\": \"string\" },\r",
									"                        \"avatar\": { \"type\": \"string\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"role\": { \"type\": \"string\" },\r",
									"                        \"createdAt\": { \"type\": \"string\" },\r",
									"                        \"updatedAt\": { \"type\": \"string\" }\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"const update_schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"object\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"_id\": { \"type\": \"string\" },\r",
									"                        \"username\": { \"type\": \"string\" },\r",
									"                        \"email\": { \"type\": \"string\" },\r",
									"                        \"password\": { \"type\": \"string\" },\r",
									"                        \"avatar\": { \"type\": \"string\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"role\": { \"type\": \"string\" },\r",
									"                        \"createdAt\": { \"type\": \"string\" },\r",
									"                        \"updatedAt\": { \"type\": \"string\" }\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"const entity_path = \"/users\";\r",
									"\r",
									"const e_data = {\r",
									"    \"username\" : \"Marienero\",\r",
									"    \"email\" : \"mauveTercelle@jira.atlassian.cash\",\r",
									"    \"password\" : \"jironde42\",\r",
									"    \"avatar\" : \"La Marie dans la bible lah..\",\r",
									"    \"name\" : \"Marie Neron\",\r",
									"    \"role\" : \"Caliméro\"\r",
									"};\r",
									"pm.environment.clear();\r",
									"pm.environment.set(\"create_schema\", create_schema);\r",
									"pm.environment.set(\"update_schema\", update_schema);\r",
									"pm.environment.set(\"entityPATH\", entity_path);\r",
									"pm.environment.set(\"e_data\", e_data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ping",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateEnvVariable-taxo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const create_schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"object\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"_id\": { \"type\": \"string\" },\r",
									"                        \"category\": { \"type\": \"string\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"slug\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" },\r",
									"                        \"source\": { \"type\": \"string\" },\r",
									"                        \"status\": { \"type\": \"string\" },\r",
									"                        \"addReason\": { \"type\": \"string\" },\r",
									"                        \"createdAt\": { \"type\": \"string\" },\r",
									"                        \"updatedAt\": { \"type\": \"string\" }\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"const update_schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"error\": { \"type\": \"boolean\" },\r",
									"        \"code\": { \"type\": \"number\" },\r",
									"        \"message\": { \"type\": \"string\" },\r",
									"        \"errors\": { \"type\": \"object\" },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                        \"_id\": { \"type\": \"string\" },\r",
									"                        \"category\": { \"type\": \"string\" },\r",
									"                        \"name\": { \"type\": \"string\" },\r",
									"                        \"slug\": { \"type\": \"string\" },\r",
									"                        \"description\": { \"type\": \"string\" },\r",
									"                        \"source\": { \"type\": \"string\" },\r",
									"                        \"status\": { \"type\": \"string\" },\r",
									"                        \"addReason\": { \"type\": \"string\" },\r",
									"                        \"createdAt\": { \"type\": \"string\" },\r",
									"                        \"updatedAt\": { \"type\": \"string\" }\r",
									"            },\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
									"};\r",
									"\r",
									"const entity_path = \"/taxonomies\";\r",
									"\r",
									"const e_data = {\r",
									"    \"category\" : \"occupations\",\r",
									"    \"name\" : \"Circassien\",\r",
									"    \"description\" : \"Le circassien pratique l'action de faire du cirque.\",\r",
									"    \"source\" : \"\",\r",
									"    \"status\": \"pending\",\r",
									"    \"addReason\":\"Je pense que le cirque fait partie intégrante de la culture et j'aimerais qu'il soit ajouté pour pouvoir me l'attribuer.\"\r",
									"};\r",
									"pm.environment.clear();\r",
									"pm.environment.set(\"create_schema\", create_schema);\r",
									"pm.environment.set(\"update_schema\", update_schema);\r",
									"pm.environment.set(\"entityPATH\", entity_path);\r",
									"pm.environment.set(\"e_data\", e_data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ping",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Entity",
			"item": [
				{
					"name": "Create-Entity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
									"console.log(pm.iterationData.toObject());\r",
									"\r",
									"if (pm.iterationData.has(\"infoTest\"))\r",
									"{\r",
									"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
									"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
									"    pm.iterationData.unset(\"infoTest\");\r",
									"    v_data = pm.iterationData.toObject();\r",
									"}\r",
									"else{\r",
									"    v_data = pm.environment.get(\"e_data\");\r",
									"}\r",
									"\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = pm.environment.get(\"create_schema\");\r",
									"const errorSchema = pm.globals.get(\"error_schema\");\r",
									"\r",
									"const infoTest = pm.environment.get(\"infoTest\");\r",
									"pm.iterationData.unset(\"infoTest\");\r",
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"\r",
									"pm.test('Status/code check', function(){\r",
									"    pm.response.to.have.status(infoTest.status);\r",
									"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
									"});\r",
									"\r",
									"pm.test('Error check', function(){\r",
									"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    if(infoTest.error == false)\r",
									"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
									"    else\r",
									"    pm.expect(jsonResponse).to.have.jsonSchema(errorSchema);\r",
									"});\r",
									"\r",
									"pm.test('Data check', function() {\r",
									"    if (jsonResponse.error == false) {\r",
									"        pm.environment.set(\"createdEntity\"+Number(pm.info.iteration+1), jsonData);\r",
									"        pm.expect(jsonData).to.be.an(\"object\").that.includes(pm.iterationData.toObject());\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{entityPATH}}{{createROUTE}}",
							"host": [
								"{{baseURL}}{{entityPATH}}{{createROUTE}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update-Entity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
									"console.log(pm.iterationData.toObject());\r",
									"\r",
									"if (pm.iterationData.has(\"infoTest\"))\r",
									"{\r",
									"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
									"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
									"    pm.iterationData.unset(\"infoTest\");\r",
									"    v_data = pm.iterationData.toObject();\r",
									"    if(v_data.id === undefined)\r",
									"        v_data.id = pm.environment.get(\"createdEntity1\")._id;\r",
									"}\r",
									"else{\r",
									"    //v_data = pm.environment.get(\"e_data\");\r",
									"    v_data.id = \"bidon\";\r",
									"}\r",
									"\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = pm.environment.get(\"update_schema\");\r",
									"const errorSchema = pm.globals.get(\"error_schema\");\r",
									"const infoTest = pm.environment.get(\"infoTest\");\r",
									"pm.iterationData.unset(\"infoTest\");\r",
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"pm.test('Status/code check', function(){\r",
									"    pm.response.to.have.status(infoTest.status);\r",
									"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
									"});\r",
									"\r",
									"pm.test('Error check', function(){\r",
									"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"    if (infoTest.error == false)\r",
									"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
									"    else\r",
									"    pm.expect(jsonResponse).to.have.jsonSchema(errorSchema)\r",
									"});\r",
									"\r",
									"pm.test('DataResponse is valid', function() {\r",
									"    if(jsonResponse.error == false){\r",
									"        pm.expect(jsonData).to.be.an(\"object\").that.includes(pm.iterationData.toObject());\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{entityPATH}}{{updateROUTE}}",
							"host": [
								"{{baseURL}}{{entityPATH}}{{updateROUTE}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search-Entity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
									"console.log(pm.iterationData.toObject());\r",
									"\r",
									"if (pm.iterationData.has(\"infoTest\"))\r",
									"{\r",
									"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
									"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
									"    pm.iterationData.unset(\"infoTest\");\r",
									"    v_data = pm.iterationData.toObject();\r",
									"    \r",
									"    //If iterationData.id = 1 then replace it with a id created previously\r",
									"    if (v_data.id != undefined && v_data.id == 1)\r",
									"        v_data.id = pm.environment.get(\"createdEntity1\")._id;\r",
									"}\r",
									"else{\r",
									"    v_data = {};\r",
									"}\r",
									"\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const infoTest = pm.environment.get(\"infoTest\");\r",
									"pm.iterationData.unset(\"infoTest\");\r",
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"pm.test('Status/code check', function(){\r",
									"    pm.response.to.have.status(infoTest.status);\r",
									"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
									"});\r",
									"\r",
									"pm.test('Error check', function(){\r",
									"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
									"});\r",
									"\r",
									"pm.test('Count is valid', function() {\r",
									"    if(jsonResponse.error == false){\r",
									"        if(infoTest.count == 0)\r",
									"            pm.expect(Object.keys(jsonData).length).to.be.equal(0);\r",
									"        else\r",
									"            pm.expect(Object.keys(jsonData).length).to.above(0);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{entityPATH}}{{searchROUTE}}",
							"host": [
								"{{baseURL}}{{entityPATH}}{{searchROUTE}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List-Entity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
									"console.log(pm.iterationData.toObject());\r",
									"\r",
									"if (pm.iterationData.has(\"infoTest\"))\r",
									"{\r",
									"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
									"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
									"    pm.iterationData.unset(\"infoTest\");\r",
									"    v_data = pm.iterationData.toObject();\r",
									"    \r",
									"    //If iterationData.id = 1 then replace it with a id created previously\r",
									"    if (v_data.id != undefined && v_data.id == 1)\r",
									"        v_data.id = pm.environment.get(\"createdEntity1\")._id;\r",
									"}\r",
									"else{\r",
									"    v_data = {};\r",
									"}\r",
									"\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const infoTest = pm.environment.get(\"infoTest\");\r",
									"pm.iterationData.unset(\"infoTest\");\r",
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"pm.test('Status/code check', function(){\r",
									"    pm.response.to.have.status(infoTest.status);\r",
									"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
									"});\r",
									"\r",
									"pm.test('Error check', function(){\r",
									"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
									"});\r",
									"\r",
									"pm.test('Count is valid', function() {\r",
									"    if(jsonResponse.error == false){\r",
									"            pm.expect(jsonData.length).to.be.equal(infoTest.count);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{entityPATH}}{{listROUTE}}",
							"host": [
								"{{baseURL}}{{entityPATH}}{{listROUTE}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-Entity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let v_data = {};\r",
									"let toDel;\r",
									"let vars = pm.environment.toObject();\r",
									"let varsKeys = Object.keys(vars);\r",
									"let env = Object.keys(pm.environment.toObject())\r",
									"\r",
									"v_data.id = \"\";\r",
									"\r",
									"if (v_data.id == \"\"){\r",
									"    while(varsKeys.length != 0){\r",
									"        toDel = varsKeys.pop();\r",
									"\r",
									"        if (toDel.includes(\"created\") || toDel.includes(\"infoTest\")){\r",
									"            break;\r",
									"        }\r",
									"        if (varsKeys.length == 0)\r",
									"            toDel = undefined;\r",
									"    }\r",
									"    if (toDel != undefined){\r",
									"        v_data.id = vars[toDel]._id\r",
									"        pm.environment.unset(toDel);\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.variables.set(\"v_data\", JSON.stringify(v_data));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();\r",
									"const jsonData = jsonResponse.data;\r",
									"\r",
									"\r",
									"pm.test('Status OK', function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Delete successful', function(){\r",
									"    pm.expect(jsonResponse.error).to.be.false;\r",
									"    pm.expect(jsonResponse.errors).to.be.empty;\r",
									"});\r",
									"\r",
									"let vars = pm.environment.toObject();\r",
									"let varsKeys = Object.keys(vars);\r",
									"let toDel;\r",
									"let nextTest = false;\r",
									"while(varsKeys.length != 0){\r",
									"    toDel = varsKeys.pop();\r",
									"\r",
									"    if (toDel.includes(\"created\") || toDel.includes(\"infoTest\")){\r",
									"        nextTest = true;\r",
									"        break;\r",
									"    }\r",
									"    if (varsKeys.length == 0)\r",
									"        nextTest = false;\r",
									"\r",
									"}\r",
									"if (nextTest)\r",
									"    postman.setNextRequest(\"Delete-Entity\");\r",
									"else\r",
									"    postman.setNextRequest(null);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{entityPATH}}/delete",
							"host": [
								"{{baseURL}}{{entityPATH}}"
							],
							"path": [
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateEnvVariable",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"const e_data = {\r",
									"    \r",
									"};\r",
									"pm.environment.set(\"e_data\", e_data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ping",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "TempRequest",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{\r\n        \r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{entityPATH}}/create",
							"host": [
								"{{baseURL}}{{entityPATH}}"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentification",
			"item": [
				{
					"name": "Dev",
					"item": [
						{
							"name": "Dev Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();\r",
											"\r",
											"pm.globals.set(\"DevToken\", jsonResponse.token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:8000/generate-token",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"generate-token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "1-Login utilisateur qui n'existe pas",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"username\",\r\n    \"password\": \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/login",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "1-Login utilisateur qui existe",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"datageek\",\r\n    \"password\": \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/login",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "VerifyToken",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjI5NjQ4Y2VjNGRiNmJlOTIyNTNhYjE0IiwidXNlcm5hbWUiOiJNYXJpZW5lcm8iLCJyb2xlIjoiQ2FsaW3DqXJvIiwiaWF0IjoxNjU0MTg2MTk2LCJleHAiOjE2NTQyNzI1OTZ9.r6TC41ebN47_x5HiROKr0c1wan7KYU5UjCwt_ev9C44\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/verify-token",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"verify-token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Registration",
					"item": [
						{
							"name": "1- Register-user",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"username\": \"joebine\",\r\n        \"password\": \"1234\",\r\n        \"email\": \"marcandre@mamarmite.com\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8000/register",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"register"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Générique",
			"item": [
				{
					"name": "404",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/asdfasdfasdfasdf",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"asdfasdfasdfasdf"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UserHistory",
			"item": [
				{
					"name": "history-Create",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{\r\n        \"user\":\"62cf242933be108a45c85be6\",\r\n        \"ipAddress\":\"UneAdresseIP\",\r\n        \"modifiedEntity\":\"62d0417ebc2a9629f4d7c683\",\r\n        \"action\":\"create\",\r\n        \"fields\":{\r\n            \"name\":\"Taxo1\",\r\n            \"slug\":\"saxonomie\"\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{usrHstPATH}}/create",
							"host": [
								"{{baseURL}}{{usrHstPATH}}"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "history-list",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\":{\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{usrHstPATH}}/list",
							"host": [
								"{{baseURL}}{{usrHstPATH}}"
							],
							"path": [
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sanitization",
			"item": [
				{
					"name": "Create",
					"item": [
						{
							"name": "1-Create-Organisation-sanitization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let v_data = {};\r",
											"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
											"console.log(pm.iterationData.toObject());\r",
											"\r",
											"if (pm.iterationData.has(\"infoTest\"))\r",
											"{\r",
											"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
											"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
											"    pm.iterationData.unset(\"infoTest\");\r",
											"\r",
											"    v_data = pm.iterationData.toObject();\r",
											"\r",
											"}\r",
											"else{\r",
											"    v_data.name = \"Librairie Pommerleau\";\r",
											"    v_data.description = '<h6><span style=\"font-weight: 400;\">Bluff, une coproduction du Petit Théâtre du Vieux Noranda et des <a href=\"http://productionsquitteoudouble.com/\">Productions Quitte ou Double</a></span></h6><p><strong>Bluff, pièce de théâtre en téléprésence.</strong></p><p><span style=\"font-weight: 400;\">Trois interprètes se trouvent dans trois villes différentes, réuni·es* par un dispositif de téléprésence. Iels se révèlent, se questionnent, discutent et débattent autour des questions de l’authenticité, du mensonge et de l’imaginaire. À travers la caméra, iels cherchent à démontrer leur honnêteté et leur intégrité.</p><script></script>';;\r",
											"    v_data.url = \"https://lalibrairiepommerleau.meilleur\";\r",
											"    v_data.contactPoint = \"info@meilleurelibrairie.meilleurfois2\"\r",
											"    //v_data.dateDeFondation = \"1kjkjhgvjhbj2-22-2050\";\r",
											"\r",
											"}\r",
											"\r",
											"pm.variables.set(\"v_data\", JSON.stringify(v_data));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"error\": { \"type\": \"boolean\" },\r",
											"        \"code\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"errors\": { \"type\": \"array\" },\r",
											"        \"data\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                        \"_id\": { \"type\": \"string\" },\r",
											"                        \"nom\": { \"type\": \"string\" },\r",
											"                        \"description\": { \"type\": \"string\" },\r",
											"                        \"url\": { \"type\": \"string\" },\r",
											"                        \"contactPoint\": { \"type\": \"string\" },\r",
											"                        \"fondationDate\": { \"type\": \"string\" },\r",
											"                        \"createdAt\": { \"type\": \"string\" },\r",
											"                        \"updatedAt\": { \"type\": \"string\" }\r",
											"            },\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
											"};\r",
											"const infoTest = pm.environment.get(\"infoTest\");\r",
											"pm.iterationData.unset(\"infoTest\");\r",
											"const jsonResponse = pm.response.json();\r",
											"const jsonData = jsonResponse.data;\r",
											"\r",
											"\r",
											"pm.test('Status/code check', function(){\r",
											"    pm.response.to.have.status(infoTest.status);\r",
											"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
											"});\r",
											"\r",
											"pm.test('Error check', function(){\r",
											"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"if (jsonResponse.error == false)\r",
											"{\r",
											"    pm.environment.set(\"org\"+Number(pm.info.iteration+1), jsonData);\r",
											"\r",
											"    pm.test('Data check', function(){\r",
											"        pm.expect(jsonData).to.be.an(\"object\").that.includes(pm.iterationData.toObject());\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}{{orgPATH}}/create",
									"host": [
										"{{baseURL}}{{orgPATH}}"
									],
									"path": [
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "1-Create-person-sanitization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"error\": { \"type\": \"boolean\" },\r",
											"        \"code\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"errors\": { \"type\": \"array\" },\r",
											"        \"data\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                        \"_id\": { \"type\": \"string\" },\r",
											"                        \"lastName\": { \"type\": \"string\" },\r",
											"                        \"firstName\": { \"type\": \"string\" },\r",
											"                        \"slug\": { \"type\": \"string\" },\r",
											"                        \"nickname\": { \"type\": \"string\" },\r",
											"                        \"description\": { \"type\": \"string\" },\r",
											"                        \"occupation\": { \"type\": \"array\" },\r",
											"                        \"createdAt\": { \"type\": \"string\" },\r",
											"                        \"updatedAt\": { \"type\": \"string\" }\r",
											"            },\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
											"};\r",
											"const infoTest = pm.environment.get(\"infoTest\");\r",
											"pm.iterationData.unset(\"infoTest\");\r",
											"const jsonResponse = pm.response.json();\r",
											"const jsonData = jsonResponse.data;\r",
											"\r",
											"\r",
											"pm.test('Status/code check', function(){\r",
											"    pm.response.to.have.status(infoTest.status);\r",
											"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
											"});\r",
											"\r",
											"pm.test('Error check', function(){\r",
											"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test('Data check', function() {\r",
											"    if (infoTest.error == false) {\r",
											"        pm.environment.set(\"pers\"+Number(pm.info.iteration+1), jsonData);\r",
											"        pm.expect(jsonData).to.be.an(\"object\").that.includes(pm.iterationData.toObject());\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let v_data = {};\r",
											"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
											"console.log(pm.iterationData.toObject());\r",
											"\r",
											"if (pm.iterationData.has(\"infoTest\"))\r",
											"{\r",
											"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
											"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
											"    pm.iterationData.unset(\"infoTest\");\r",
											"    v_data = pm.iterationData.toObject();\r",
											"}\r",
											"else{\r",
											"    v_data.lastName = \"Parent\";\r",
											"    v_data.firstName = \"Jean-marc\";\r",
											"    v_data.nickname = \"Mickette\";\r",
											"    v_data.description = \"Humour\";\r",
											"}\r",
											"\r",
											"pm.variables.set(\"v_data\", JSON.stringify(v_data));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\":{{v_data}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}{{persPATH}}/create",
									"host": [
										"{{baseURL}}{{persPATH}}"
									],
									"path": [
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "1-Create-user-sanitization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"error\": { \"type\": \"boolean\" },\r",
											"        \"code\": { \"type\": \"number\" },\r",
											"        \"message\": { \"type\": \"string\" },\r",
											"        \"errors\": { \"type\": \"object\" },\r",
											"        \"data\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                        \"_id\": { \"type\": \"string\" },\r",
											"                        \"username\": { \"type\": \"string\" },\r",
											"                        \"email\": { \"type\": \"string\" },\r",
											"                        \"password\": { \"type\": \"string\" },\r",
											"                        \"avatar\": { \"type\": \"string\" },\r",
											"                        \"name\": { \"type\": \"string\" },\r",
											"                        \"role\": { \"type\": \"string\" },\r",
											"                        \"createdAt\": { \"type\": \"string\" },\r",
											"                        \"updatedAt\": { \"type\": \"string\" }\r",
											"            },\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\"error\", \"code\", \"message\", \"errors\", \"data\"]\r",
											"};\r",
											"\r",
											"const infoTest = pm.environment.get(\"infoTest\");\r",
											"pm.iterationData.unset(\"infoTest\");\r",
											"const jsonResponse = pm.response.json();\r",
											"const jsonData = jsonResponse.data;\r",
											"\r",
											"pm.test('Status/code check', function(){\r",
											"    pm.response.to.have.status(infoTest.status);\r",
											"    pm.expect(jsonResponse.code).to.equal(infoTest.status);\r",
											"});\r",
											"\r",
											"pm.test('Error check', function(){\r",
											"    pm.expect(jsonResponse.error).to.equal(infoTest.error);\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function() {\r",
											"    pm.expect(jsonResponse).to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test('Data check', function() {\r",
											"    if (infoTest.error == false) {\r",
											"        pm.environment.set(\"user\"+Number(pm.info.iteration+1), jsonData);\r",
											"        pm.expect(jsonData).to.be.an(\"object\").that.includes(pm.iterationData.toObject());\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let v_data = {};\r",
											"console.log(\"Test en cours :\" + pm.iterationData.get(\"infoTest\") + \" - Itération : \" + Number(pm.info.iteration+1));\r",
											"console.log(pm.iterationData.toObject());\r",
											"\r",
											"if (pm.iterationData.has(\"infoTest\"))\r",
											"{\r",
											"    //Retirer les variables non nécessaire dans l'objet à envoyer.\r",
											"    pm.environment.set(\"infoTest\",pm.iterationData.get(\"infoTest\"));\r",
											"    pm.iterationData.unset(\"infoTest\");\r",
											"    v_data = pm.iterationData.toObject();\r",
											"}\r",
											"else{\r",
											"    v_data.username = \"Marienero\";\r",
											"    v_data.email = \"mauveTercelle@jira.atlassian.cash\";\r",
											"    v_data.password = \"jironde42\";\r",
											"    v_data.avatar = \"La Marie dans la bible lah..\"\r",
											"    v_data.name = \"Marie Neron\";\r",
											"    v_data.role = \"Caliméro\";\r",
											"}\r",
											"\r",
											"pm.variables.set(\"v_data\", JSON.stringify(v_data));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\" : {{v_data}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}{{usersPATH}}/create",
									"host": [
										"{{baseURL}}{{usersPATH}}"
									],
									"path": [
										"create"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{DevToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}